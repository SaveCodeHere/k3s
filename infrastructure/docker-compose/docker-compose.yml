services:
  # Single Traefik handling both public and private routing
  traefik:
    image: traefik:v3.4.3
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=Europe/Copenhagen
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    depends_on:
      - tailscale-traefik
    ports:
      - "80:80"     # Public HTTP (redirects to HTTPS)
      - "443:443"   # Public/Private HTTPS
      - "8080:8080" # Dashboard (we'll secure this)
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /data/foundation/traefik/letsencrypt:/certs
    command:
      # Docker provider
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=infra_network
      
      # API and dashboard
      - --api.dashboard=true
      - --api.insecure=true
      
      # Let's Encrypt with Cloudflare DNS challenge
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json
      
      # Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      
      # TLS configuration for public services
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=nicstack.dev
      - --entrypoints.websecure.http.tls.domains[0].sans=*.nicstack.dev
    labels:
      - "traefik.enable=true"
      
      # Public dashboard access
      - "traefik.http.routers.traefik-public.rule=Host(`traefik.nicstack.dev`)"
      - "traefik.http.routers.traefik-public.entrypoints=websecure"
      - "traefik.http.routers.traefik-public.service=api@internal"
      - "traefik.http.routers.traefik-public.tls.certresolver=letsencrypt"
      
      # Private dashboard access via wildcard DNS
      - "traefik.http.routers.traefik-private.rule=Host(`traefik.ts.nicstack.dev`)"
      - "traefik.http.routers.traefik-private.entrypoints=websecure"
      - "traefik.http.routers.traefik-private.service=api@internal"
      - "traefik.http.routers.traefik-private.tls=true"  # Self-signed cert is fine for Tailscale
    networks:
      - infra_network

  # Landing page service with both public and private access
  landing-page:
    image: nginx:alpine
    container_name: landing-page
    restart: unless-stopped
    volumes:
      - ./configs/landing-page/index.html:/usr/share/nginx/html/index.html:ro
      - ./configs/landing-page/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./configs/landing-page/app.js:/usr/share/nginx/html/app.js:ro
      - ./configs/landing-page/config.json:/usr/share/nginx/html/config.json:ro
      - ./configs/landing-page/services.json:/usr/share/nginx/html/services.json:ro
    labels:
      - "traefik.enable=true"
      
      # Public access (HTTPS with Let's Encrypt)
      - "traefik.http.routers.landing-public.rule=Host(`home.nicstack.dev`)"
      - "traefik.http.routers.landing-public.entrypoints=websecure"
      - "traefik.http.routers.landing-public.tls.certresolver=letsencrypt"
      - "traefik.http.routers.landing-public.service=landing-page-svc"
      
      # Private access via Tailscale with wildcard DNS
      - "traefik.http.routers.landing-private.rule=Host(`home.ts.nicstack.dev`)"
      - "traefik.http.routers.landing-private.entrypoints=websecure"
      - "traefik.http.routers.landing-private.service=landing-page-svc"
      - "traefik.http.routers.landing-private.tls=true"
      
      # Shared service definition
      - "traefik.http.services.landing-page-svc.loadbalancer.server.port=80"
    networks:
      - infra_network

  # Portainer - private only via Tailscale
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data/foundation/portainer:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.ts.nicstack.dev`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.service=portainer-svc"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"
    networks:
      - infra_network

  # Pi-hole - private only via Tailscale  
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    restart: unless-stopped
    environment:
      - TZ=Europe/Copenhagen
      - WEBPASSWORD=${PIHOLE_PASSWORD}
      - INTERFACE=eth0
      - DNSMASQ_LISTENING=all
    volumes:
      - ./configs/pi-hole/custom.conf:/etc/dnsmasq.d/custom.conf:ro
      - /data/foundation/pihole/etc:/etc/pihole
      - /data/foundation/pihole/dnsmasq:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
      - SYS_TIME
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`pihole.ts.nicstack.dev`)"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.service=pihole-svc"
      - "traefik.http.routers.pihole.tls=true"
      - "traefik.http.services.pihole-svc.loadbalancer.server.port=80"
    networks:
      - infra_network

  # Vault - private only via Tailscale
  vault:
    image: hashicorp/vault:1.16
    container_name: vault
    restart: unless-stopped
    command: vault server -config=/vault/config/vault.hcl
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - ./configs/vault:/vault/config
      - /data/foundation/vault/data:/vault/data
      - /data/foundation/vault/logs:/vault/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vault.rule=Host(`vault.ts.nicstack.dev`)"
      - "traefik.http.routers.vault.entrypoints=websecure"
      - "traefik.http.routers.vault.service=vault-svc"
      - "traefik.http.routers.vault.tls=true"
      - "traefik.http.services.vault-svc.loadbalancer.server.port=8200"
    networks:
      - infra_network

  # Tailscale sidecar container
  tailscale-traefik:
    image: tailscale/tailscale:latest
    container_name: tailscale-traefik
    hostname: traefik
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
    volumes:
      - ./tailscale-traefik/state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped
    networks:
      - infra_network
networks:
  infra_network:
    name: infra_network
    driver: bridge

